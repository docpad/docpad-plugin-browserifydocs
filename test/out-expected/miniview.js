(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports.extendOnClass = function(proto) {
    var key, klass, value;
    klass = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        if (proto.hasOwnProperty('constructor')) {
          proto.constructor.apply(this, arguments);
        } else {
          _Class.__super__.constructor.apply(this, arguments);
        }
      }

      return _Class;

    })(this);
    for (key in proto) {
      if (!__hasProp.call(proto, key)) continue;
      value = proto[key];
      klass.prototype[key] = value;
    }
    return klass;
  };

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var $, View, extendOnClass,
    __hasProp = {}.hasOwnProperty;

  $ = this.$ || (typeof window !== "undefined" && window !== null ? window.$ : void 0) || ((function() {
    try {
      return typeof require === "function" ? require('jquery') : void 0;
    } catch (_error) {}
  })());

  extendOnClass = require('extendonclass').extendOnClass;

  View = (function() {
    View.extend = extendOnClass;

    View.prototype.events = null;

    View.prototype.elements = null;

    View.prototype.el = null;

    View.prototype.$el = null;

    function View(opts) {
      this.events = this.events ? JSON.parse(JSON.stringify(this.events)) : {};
      this.elements = this.elements ? JSON.parse(JSON.stringify(this.elements)) : {};
      this.setConfig(opts);
      this.refreshElement();
      this.refreshElements();
      this.refreshEvents();
      this;
    }

    View.prototype.setConfig = function(opts) {
      var key, value;
      if (opts == null) {
        opts = {};
      }
      for (key in opts) {
        if (!__hasProp.call(opts, key)) continue;
        value = opts[key];
        this[key] = value;
      }
      return this;
    };

    View.prototype.refreshElement = function(el) {
      if (el == null) {
        el = null;
      }
      this.el = el != null ? el : this.el;
      this.$el = $(this.el);
      this.el = this.$el.get(0);
      return this;
    };

    View.prototype.refreshElements = function() {
      var elementName, selector, _ref;
      _ref = this.elements;
      for (selector in _ref) {
        if (!__hasProp.call(_ref, selector)) continue;
        elementName = _ref[selector];
        this[elementName] = $(selector, this.$el);
      }
      return this;
    };

    View.prototype.refreshEvents = function(opts) {
      var eventMethod, eventName, key, methodName, selector, split, _ref;
      if (opts == null) {
        opts = {};
      }
      opts.detach = true;
      opts.attach = true;
      _ref = this.events;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        methodName = _ref[key];
        if (this[methodName].toString().indexOf('[native code]') === -1) {
          this[methodName] = this[methodName].bind(this);
        }
        split = key.indexOf(' ');
        eventName = key.substr(0, split);
        selector = key.substr(split + 1);
        eventMethod = this[methodName];
        if (opts.detach === true) {
          this.$el.off(eventName, selector, eventMethod);
        }
        if (opts.attach === true) {
          this.$el.on(eventName, selector, eventMethod);
        }
      }
      return this;
    };

    View.prototype.destroy = function() {
      this.refreshEvents({
        detach: true,
        attach: false
      });
      this.$el.remove();
      return this;
    };

    return View;

  })();

  module.exports = {
    View: View
  };

}).call(this);

},{"extendonclass":2,"jquery":1}],4:[function(require,module,exports){
// our code
var miniview = require('miniview');
},{"miniview":3}]},{},[4])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvaG9tZS9yb2IvRG9jdW1lbnRzL2RvY3BhZC1wbHVnaW4tYnJvd3NlcmlmeWJ1bmRsZXMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9ob21lL3JvYi9Eb2N1bWVudHMvZG9jcGFkLXBsdWdpbi1icm93c2VyaWZ5YnVuZGxlcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwiL2hvbWUvcm9iL0RvY3VtZW50cy9kb2NwYWQtcGx1Z2luLWJyb3dzZXJpZnlidW5kbGVzL25vZGVfbW9kdWxlcy9taW5pdmlldy9ub2RlX21vZHVsZXMvZXh0ZW5kb25jbGFzcy9vdXQvbGliL2V4dGVuZG9uY2xhc3MuanMiLCIvaG9tZS9yb2IvRG9jdW1lbnRzL2RvY3BhZC1wbHVnaW4tYnJvd3NlcmlmeWJ1bmRsZXMvbm9kZV9tb2R1bGVzL21pbml2aWV3L291dC9saWIvdmlldy5qcyIsIi9ob21lL3JvYi9Eb2N1bWVudHMvZG9jcGFkLXBsdWdpbi1icm93c2VyaWZ5YnVuZGxlcy90ZXN0L291dC9taW5pdmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIixudWxsLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNi4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5leHRlbmRPbkNsYXNzID0gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICB2YXIga2V5LCBrbGFzcywgdmFsdWU7XG4gICAga2xhc3MgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICBfX2V4dGVuZHMoX0NsYXNzLCBfc3VwZXIpO1xuXG4gICAgICBmdW5jdGlvbiBfQ2xhc3MoKSB7XG4gICAgICAgIGlmIChwcm90by5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSkge1xuICAgICAgICAgIHByb3RvLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX0NsYXNzLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfQ2xhc3M7XG5cbiAgICB9KSh0aGlzKTtcbiAgICBmb3IgKGtleSBpbiBwcm90bykge1xuICAgICAgaWYgKCFfX2hhc1Byb3AuY2FsbChwcm90bywga2V5KSkgY29udGludWU7XG4gICAgICB2YWx1ZSA9IHByb3RvW2tleV07XG4gICAgICBrbGFzcy5wcm90b3R5cGVba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4ga2xhc3M7XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNi4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciAkLCBWaWV3LCBleHRlbmRPbkNsYXNzLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gICQgPSB0aGlzLiQgfHwgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93ICE9PSBudWxsID8gd2luZG93LiQgOiB2b2lkIDApIHx8ICgoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiID8gcmVxdWlyZSgnanF1ZXJ5JykgOiB2b2lkIDA7XG4gICAgfSBjYXRjaCAoX2Vycm9yKSB7fVxuICB9KSgpKTtcblxuICBleHRlbmRPbkNsYXNzID0gcmVxdWlyZSgnZXh0ZW5kb25jbGFzcycpLmV4dGVuZE9uQ2xhc3M7XG5cbiAgVmlldyA9IChmdW5jdGlvbigpIHtcbiAgICBWaWV3LmV4dGVuZCA9IGV4dGVuZE9uQ2xhc3M7XG5cbiAgICBWaWV3LnByb3RvdHlwZS5ldmVudHMgPSBudWxsO1xuXG4gICAgVmlldy5wcm90b3R5cGUuZWxlbWVudHMgPSBudWxsO1xuXG4gICAgVmlldy5wcm90b3R5cGUuZWwgPSBudWxsO1xuXG4gICAgVmlldy5wcm90b3R5cGUuJGVsID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIFZpZXcob3B0cykge1xuICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cyA/IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5ldmVudHMpKSA6IHt9O1xuICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuZWxlbWVudHMgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZWxlbWVudHMpKSA6IHt9O1xuICAgICAgdGhpcy5zZXRDb25maWcob3B0cyk7XG4gICAgICB0aGlzLnJlZnJlc2hFbGVtZW50KCk7XG4gICAgICB0aGlzLnJlZnJlc2hFbGVtZW50cygpO1xuICAgICAgdGhpcy5yZWZyZXNoRXZlbnRzKCk7XG4gICAgICB0aGlzO1xuICAgIH1cblxuICAgIFZpZXcucHJvdG90eXBlLnNldENvbmZpZyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgIHZhciBrZXksIHZhbHVlO1xuICAgICAgaWYgKG9wdHMgPT0gbnVsbCkge1xuICAgICAgICBvcHRzID0ge307XG4gICAgICB9XG4gICAgICBmb3IgKGtleSBpbiBvcHRzKSB7XG4gICAgICAgIGlmICghX19oYXNQcm9wLmNhbGwob3B0cywga2V5KSkgY29udGludWU7XG4gICAgICAgIHZhbHVlID0gb3B0c1trZXldO1xuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5yZWZyZXNoRWxlbWVudCA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICBpZiAoZWwgPT0gbnVsbCkge1xuICAgICAgICBlbCA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmVsID0gZWwgIT0gbnVsbCA/IGVsIDogdGhpcy5lbDtcbiAgICAgIHRoaXMuJGVsID0gJCh0aGlzLmVsKTtcbiAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbC5nZXQoMCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUucmVmcmVzaEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWxlbWVudE5hbWUsIHNlbGVjdG9yLCBfcmVmO1xuICAgICAgX3JlZiA9IHRoaXMuZWxlbWVudHM7XG4gICAgICBmb3IgKHNlbGVjdG9yIGluIF9yZWYpIHtcbiAgICAgICAgaWYgKCFfX2hhc1Byb3AuY2FsbChfcmVmLCBzZWxlY3RvcikpIGNvbnRpbnVlO1xuICAgICAgICBlbGVtZW50TmFtZSA9IF9yZWZbc2VsZWN0b3JdO1xuICAgICAgICB0aGlzW2VsZW1lbnROYW1lXSA9ICQoc2VsZWN0b3IsIHRoaXMuJGVsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5yZWZyZXNoRXZlbnRzID0gZnVuY3Rpb24ob3B0cykge1xuICAgICAgdmFyIGV2ZW50TWV0aG9kLCBldmVudE5hbWUsIGtleSwgbWV0aG9kTmFtZSwgc2VsZWN0b3IsIHNwbGl0LCBfcmVmO1xuICAgICAgaWYgKG9wdHMgPT0gbnVsbCkge1xuICAgICAgICBvcHRzID0ge307XG4gICAgICB9XG4gICAgICBvcHRzLmRldGFjaCA9IHRydWU7XG4gICAgICBvcHRzLmF0dGFjaCA9IHRydWU7XG4gICAgICBfcmVmID0gdGhpcy5ldmVudHM7XG4gICAgICBmb3IgKGtleSBpbiBfcmVmKSB7XG4gICAgICAgIGlmICghX19oYXNQcm9wLmNhbGwoX3JlZiwga2V5KSkgY29udGludWU7XG4gICAgICAgIG1ldGhvZE5hbWUgPSBfcmVmW2tleV07XG4gICAgICAgIGlmICh0aGlzW21ldGhvZE5hbWVdLnRvU3RyaW5nKCkuaW5kZXhPZignW25hdGl2ZSBjb2RlXScpID09PSAtMSkge1xuICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPSB0aGlzW21ldGhvZE5hbWVdLmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgc3BsaXQgPSBrZXkuaW5kZXhPZignICcpO1xuICAgICAgICBldmVudE5hbWUgPSBrZXkuc3Vic3RyKDAsIHNwbGl0KTtcbiAgICAgICAgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKHNwbGl0ICsgMSk7XG4gICAgICAgIGV2ZW50TWV0aG9kID0gdGhpc1ttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKG9wdHMuZGV0YWNoID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy4kZWwub2ZmKGV2ZW50TmFtZSwgc2VsZWN0b3IsIGV2ZW50TWV0aG9kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5hdHRhY2ggPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLiRlbC5vbihldmVudE5hbWUsIHNlbGVjdG9yLCBldmVudE1ldGhvZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlZnJlc2hFdmVudHMoe1xuICAgICAgICBkZXRhY2g6IHRydWUsXG4gICAgICAgIGF0dGFjaDogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZpZXc7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBWaWV3OiBWaWV3XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvLyBvdXIgY29kZVxudmFyIG1pbml2aWV3ID0gcmVxdWlyZSgnbWluaXZpZXcnKTsiXX0=
